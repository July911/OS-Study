5 - 2: Calling fork() And wait(), 5 - 3: Wait() 

자식의  PID가 0 인것은 유용하다 2개의 자식과 부모 프로세스를 관리하는것에 있어서 
아마 알수도 있겠지만, 자식이 만들어질때 2개의 액티브한 프로세스를 관리해야 한다는 결과는 결정되어있지않다.
1개의 CPU가 시스템에서 돌아가고 있다고 가정해보자, 그리고 2개의 자식 부모 프로세스가 있다. 
자식의 프로세스가 먼저 실행되리라는 확신은 없다. 부모 프로세스가 먼저 실행될 수도 있다. 
CPU가 여러개라면, 이러한 상황은 더 빈번하게 일어날 것이다. 

Wait() 시스템콜은, 부모가 자식이 프로세스를 종료할때 까지 기다린다. 

5 - 3  Finally, The exec() System Call

Exec() PID를 계승받는다. 시스템 콜을 한 프로세스 위에 덮어쓰여진다. 
Exec() 콜을 하면 힙과 스택에 있는 프로그램이 재 초기화가 된다. 
이것은 새로운 프로세스를 만드는 것이 아닌, 이전 프로세스에서 다른 프로세르로의 전환이라고 볼 수 있다. 

5 - 4: Why? Motivating The API

왜 이러한 이상한 인터페이스를 만들어놓았을까? 
UNIX 쉘에서 Fork() 와 Exec() 시스템 콜은 유용하다. 
이러한 코드는 프로그램을 실행시키는 프로그램에서 아주 유용하게 실행중인 프로그램을 전환 할 수 있게 만들어준다.

쉘은 그저 유저프로그램이고 사용자가 입력하기 전까지 프롬프트를 줄 뿐이다. 어떠한 명령을 입력한다면, 쉘은 파일시스템에 어디에 프로그램이 위치하는지 찾는다.



4-5 Data Structures

OS 프로그램은, 다른 프로그램과 같이 여러 정보를 추적하는 데이터 구조가 있다.
OS는 현재 실행중인 프로그램이나 준비중인 프로세스가 있는 프로세스 리스트가 있다. 
또한 차단된 프로세스 역시 추적해야한다. 
I/O 작업이 끝나면, OS는 적당한 프로세스를 꺠워야한다. 
xv6 커널안에서 어떤 타입의 정보가 OS가 각 프로세스를 추적하는데 필요한지 알려준다. 
register context는 정지된 프로세스를 위하여 각 레지스터의 정보를 가지고 있어야한다. 
프로세스가 정지될 상황에서 그 프로세스의 레지서터는 메모리 위치를 저장해야한다. 새로 시작했을때 그 위치에서 시작하기 위해서 
우리는 이러한 테크닉을 컨텐스트 스위칭이라고 추후 챕터에서 배울 것이다. 
프로세스가 가질 수 있는 상태는 실행중, 준비, 차단 말고도 시작과 끝이 존재한다. 
프로세스가 끝날 시점이 오면 부모 프로세스는 wait()콜을 통해 자식을 죽인다. 


5 Interlude: Process AP 

유닉스는 새로운 프로로세를 생성하기 위해 fork() 와 exec()콜을 통해 한다. 
세번째 루틴은 wait()이다. wait()은 프로세스가 다 생성될때까지 기다리는 콜이다. 

5.1 The fork() System Call

포크 시스템콜은 지금까지 했던 어떤 콜보다 가장 강력한 루틴이다. 
각 프로세스는 PID를 가지는데, 자식과 부모의 PID는 다르다. 
